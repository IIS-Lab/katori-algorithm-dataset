time,personID,problemID,1st,1st_reason,2nd,2nd_reason,3rd,3rd_reason,others,understanding,free
12/10/2022 23:35:03,3,1,8,尺取り法は特定の連続部分列に対する処理を全探索ではなく、左端と右端を上手くずらすことでO(N)に抑えるアルゴリズムだが、7行目と合わせてコアの部分だから。,7,8行目と合わせて尺取り法のコアの部分だが、問題特有の処理はないから。,2,要素に0が含まれている時の例外処理はこの問題固有のものだから。,,とても理解できた。,
12/10/2022 23:41:21,3,2,37,RSQはセグ木を使えば計算量的に効率よく解けることに気付ければ後はセグ木を作れるorとってこれるかだけなので。,21,一応セグ木というデータ構造における重要なのは更新式をこの式で再帰的に（ここではwhile文だが）行えることだから。,29,一応セグ木というデータ構造における重要なのはクエリをこの式で再帰的に（ここではwhile文だが）行えることだから。,,まあ理解できた。,
12/10/2022 23:49:48,3,3,12,バケツソートでどこが重要かは難しいところだがしいて言えば計数後に順番に配列をつくるところ、かもしれないから。,13,数後に順番に配列をつくるところでまあインデックス管理も重要かな、と思ったから。,7,計数しているところもしいて言えば重要かもしれないと思ったから。,,とても理解できた。,
12/11/2022 0:34:39,3,4,18,この問題のコアは二分探索木というデータ構造そのものだと思うのですが、二分探索木で一番大事なのはまあここのwhileだけでinsert or  検索位置がわかることかなと思ったからです。,30,問題に効率よくこたえるためには不可欠なメソッドだから。逆に言えばコアな部分ではない。,36,問題に効率よくこたえるためには不可欠なメソッドだから。逆に言えばコアな部分ではない。,,とても理解できた。,
12/11/2022 0:47:43,3,5,29,dfsで解けるということがこの問題で一番コアな部分だと思うので。,19,今回の問題のコアであるdfsで一番大事なのはここの再帰構造だと思うので。,24,この問題特有の部分は、ただdfsを回すだけではなく一応全ての頂点についてチェックしなければいけないことだから。,,とても理解できた。,
12/11/2022 0:52:52,3,6,10,ナップサック問題は要はdpで解けることが一番大事だが、そのコアはここの遷移式なので。,8,dpは状態を適切に管理することで全探索を効率化することだと考えられるが、9行目と合わせてここが全探索部分なので。,9,dpは状態を適切に管理することで全探索を効率化することだと考えられるが、8行目と合わせてここが全探索部分なので。,,とても理解できた。,
12/11/2022 0:57:18,3,7,26,この問題の一番コアなところは二分探索を使って効率的に探索できることに気付くことなので。,9,この問題で一番大事なアルゴリズム二分探索の大事な部分は、ここで区間を半分にしながら探索できることだと思うから。,8,上述した区間を半分にすることを繰り返すことで必要なindexを求められるのが二分探索で大事なところなので、繰り返し処理もまあちょっとは大事かもしれない。,,とても理解できた。,
12/11/2022 1:02:45,3,8,27,この問題のコアなところは、データ構造queueを使えば問題の設定をそのままシミュレーションできることに気付くことなので。,37,queueを使って実際に問題の状況をシミュレートしているところはここだから。,7,リングバッファを用いたqueueのどこが一番大事かは少々微妙だがしいて言えば8行と合わせてここのインデックス管理だけでqueueが実装できることかなあ、と思ったから。,,とても理解できた。,
12/11/2022 1:08:43,3,9,25,この問題で一番コアなのは答えをcombination一発で求められることに気付くことだから。,21,modをとるcombinationの効率的な計算は階乗をつかうことや、階乗の逆元がフェルマーの小定理で求められることが重要だから。,7,9行目と合わせてn乗を求める時に繰り返し2乗法を用いると効率的に求められることが大事だから。,,とても理解できた。,
12/11/2022 1:11:33,3,10,12,レーベンシュタイン距離で一番大事なのはdpで求められることが一番大事だと思うが、そのコアの遷移式はここだから。,10,11行目と合わせてdpで効率化された全探索をしている部分だから。,11,10行目と合わせてdpで効率化された全探索をしている部分だから。,,とても理解できた。,
12/15/2022 19:21:13,3,11,28,クイックソートを含めてソートアルゴリズムが問題の本質だから。,15,クイックソートは境界を決めて左右でswapを繰り返すのが本質だから。,5,swapのための基準であるpivotを決めているところはswapほどではないが重要だと考えた。,,とても理解できた。,
12/15/2022 19:30:15,3,12,37,Segment Treeで解けることがこの問題のコアであるから。,29,Segment Treeでどこが重要かと言われると微妙だがこの式で区間についての演算が高速にできるのはかなり本質だと思う。,21,一点更新が対数時間で実行できるのが重要だがその本質はここの遷移式一発で更新できるからなので。,,とても理解できた。,
12/15/2022 19:33:39,3,13,45,この問題のコアはクラスカル法で最小全域木が構築できることなので。,34,クラスカル法のコアはDSUを使えば最小全域木を構築できることなので。,19,DSUのコアはここのマージテクだと減価償却で計算量が減ることなので。,,とても理解できた。,
12/15/2022 19:38:56,3,14,29,この問題のコアはマージソートを含めソートアルゴリズムで解けることなので。,5,マージソートで重要なのは分割統治と尺取り法だが、分割統治の方が本質だと思ったから。,10,マージソートで重要なアルゴリズムである尺取り法の実装はこの内部だから。,6: 5行目と同様。,とても理解できた。,
12/15/2022 19:57:57,3,15,23,この問題のコアは、厳密にいえば単一始点でちょっと手を加えて解けることなので。,5,ベルマンフォードの本質は探索順序だと思うが、ここの中継点でループを回すところで、扱うノードによる集合を大きくしていっているから。,8,ベルマンフォード法で実際に遷移を行っている部分がここだから。,,とても理解できた。,
12/15/2022 20:17:08,3,16,15,挿入ソートが良いアルゴリズムかは置いておいてこの解き方においては挿入ソートを使っていることがコアだから。,5,挿入ソートは要は一つずつ要素がどこに入れるのが適切なところか探すアルゴリズムなので比較探索箇所が重要だと考えた。,8,ホントにしいて言えばだが、最後にそこのインデックスの値を確定させるところなので。,,とても理解できた。,
12/15/2022 20:23:38,3,17,33,この問題のコアはダイクストラ法を使えば解くことが出来る、ということなので。,19,優先度つきQueも使っていないので大分苦しい実装だがしいて言えばここの比較後の遷移は大事かもしれない。,14,このダイクストラだと終了条件がないと止まらないため、ここの式は実は大事かもしれない。,,とても理解できた。,
12/15/2022 20:29:01,3,18,26,このとき方のコアはシェルソートをソートアルゴリズムとして採用していることなので。,5,シェルソートはソート間隔を変える、挿入ソートの改良版だが、ここのソート間隔の取り方が一番重要なので。,18,シェルソートは間隔を変えながら行うのが重要なアルゴリズムであるから。,,とても理解できた。,
12/15/2022 20:35:18,3,19,31,この問題のコアはラビン-カープ法、を使えば文字列の照合そのものがO(1)かつ前計算も（この問題では前計算そのものをループ憎んでいるが）線形に出来ることなので。,14,15行目と合わせて、ラビン-カープ、というかローリングハッシュにも共通でハッシュ値をMODで求めて照合に使えることが重要だから。,21,本来文字列の長さ分だけ計算が必要なハッシュ値計算をこのDPを使うことで計算量を圧縮できているから。,15,とても理解できた。,
12/15/2022 20:38:26,3,20,25,このとき方のコアはソートアルゴリズムとしてシェーカーソートを使って解いていることだから。,7,13行目と合わせて、ほとんどバブルソートと変わらない実装でも多少効率が良くなるのはここの探索順序を変更しているおかげだから。,13,7行目と合わせて、ほとんどバブルソートと変わらない実装でも多少効率が良くなるのはここの探索順序を変更しているおかげだから。,,とても理解できた。,
12/15/2022 20:43:48,3,21,22,ループ部分と迷ったが、この問題で重要なのは逆ポーランド記法は左端からstackに突っ込んでいって計算すればそのまま計算することが出来る、ということなので。,25,ここのループで左端からstackに突っ込んで行く過程を実装しているので。,6,stackというデータ構造の何が重要かと言われると難しいが、単純なリストと先頭のインデックスを管理するだけで実装が出来るというのは重要かもしれない。,,とても理解できた。,
12/15/2022 20:46:26,3,22,6,この問題のコアは最大公約数を使えば計算できることに気付くことなので。,2,最大公約数の求値アルゴリズムそのものがここで式として記述されてるから。,5,他に選ぶところがないので、まあ入力をとることもプログラミングには大事なことかもしれない。,,とても理解できた。,
12/16/2022 8:28:50,3,23,18,この問題のコアは複数の数の素数判定はエラトステネスの篩で前計算すれば高速に処理できることだから。,21,この問題でもう一つの大事なアルゴリズムとして、累積和による区間和高速計算が挙げられるが、それを実現してるのはここのDP遷移式だから。,13,エラトステネスの篩で一番重要なのはこの特殊な全探索の更新処理だと考えるから。,,とても理解できた。,
12/16/2022 8:43:03,3,24,22,トポロジカルソートはこの入次数が0になったノードからQueに突っ込んでくことで実現できるのが重要で、その実装をしているのがこことここの内部だから。,18,Queを用いた全探索及びDPには大体言えるが、探索順序の決定をQueに依存できるのは重要である。,7,しいて言えば最初に入次数とグラフを構築するのは大事かもしれない。,,とても理解できた。,
12/16/2022 8:47:18,3,25,26,この問題のコアは幅優先探索を使えば解ける、ということなので。,14,幅優先探索で重要なのはここの配るDP遷移式で状態をまとめて探索できることだから。,10,Queを用いるDPや全探索すべてに言えることだが、探索順序をQueを用いれば効率的に決定できるのは重要である。,,とても理解できた。,
12/17/2022 23:11:40,3,26,25,ワーシャルフロイド法で解けることに気付くことがこの問題のコアだから。,2,ワーシャルフロイド法の肝は中継点から回してノード集合を増やしていくDPの探索順序だと考えているから。,5,ワーシャルフロイド法に使っているDPの遷移式そのものはここだから。,,とても理解できた。,
12/17/2022 23:15:45,3,27,2,ハッシュテーブルを使って探索を効率化しているのがこの問題のコアであり、ハッシュテーブルを作っているのはここだから。,8,15行目と合わせてハッシュ値の生成を行っているのはここだから。,15,8行目と合わせてハッシュ値の生成を行っているのはここだから。,,とても理解できた。,
12/17/2022 23:24:28,3,28,39,このとき方においてはspfaで解けることに気付いていることが肝だから。,15,queueに更新されたノードを積んでいき更新できる限り更新するのがSPFAで重要だと思うから。,20,SPFAをDPとして見たときに、更新式はここで行われているから。,,とても理解できた。,
12/17/2022 23:28:48,3,29,13,このナップサック問題の肝はDPで解けることに気付くことで、その遷移式がここだから。,7,10001をハードコーディングしちゃっているが、普通のナップサックと違い、価値を横軸に取ったほうが計算量が少なくなることが重要だから。,16,求めたいのは価値なので、軸の方で適切なものを探索しているのはこの問題において重要かもしれない。,,とても理解できた。,
12/17/2022 23:32:32,3,30,28,この問題のコアはダイクストラ法で解けることに気付くことだから。,8,ダイクストラ法で重要なのはコストが小さいものから探索すれば効率よく探索できることだが、優先度つきQueを使うことでこれを少ない計算量で実装できているから。,15,ダイクストラ法にとってのコアではないが、最短経路探索法としてDPを使っていることは重要で、個々がその遷移式だから。,,とても理解できた。,
