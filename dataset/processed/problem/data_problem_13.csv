time,personID,problemID,1st,1st_reason,2nd,2nd_reason,3rd,3rd_reason,others,understanding,free
12/8/2022 23:52:05,1,13,27,重みの小さい辺から貪欲に見るというクラスカル法の重要な部分が表現されていると考えたため．,32,注目している辺の両端の頂点が既に連結かどうかを確認する部分であり，クラスカル法の実装において中心的な部分であると考えた．一方で重みの小さい辺から見ることが発想として重要であると考え，2番目とした．,3,UnionFindTreeの実装する上で，自分の親頂点をメモしておくという部分が発想として最も大切だと考えた．一方でこの問題の中心となるアルゴリズムはクラスカル法なので，3番目として選択した．,,とても理解できた。,
12/30/2022 20:34:53,10,13,32,閉路を作らないことを確認することがクラスカル法で、最も重要であると思ったため。,14,二つの木構造をまとめる実装は、unionfindにおいてとても重要であるから、2番目に重要であると思った。1番の方が、クラスカル法のアルゴリズムで気にするところだと思った。,8,木構造の根を探すことは、使われていないがunionfindにおいてとても重要であるから、3番目に重要であると思った。,,まあ理解できた。,
1/3/2023 6:22:25,11,13,27,重さの小さい辺から取っていけば，最小全域木ができるのは重要な事実だと思います．,32,Unionfindですでにつながっているかを判断している大事な箇所であるとおもいます．つながっているかのあくまで道具としてつかっているので2番目にしました．,4,rankをもつことでunionfindの構造を工夫して高速な処理をできる．unionfindのさらに細かい中身の話なので3番目にしました．,,とても理解できた。,
12/16/2022 21:32:42,2,13,27,クラスカル法は連結かどうかで辺を追加するかどうかを決めるので、その連結判定の部分が最重要であると考えた。,32,クラスカル法は事前に辺のコストでソートしておくことで高速に求められるので、これが次に重要。,34,上と同様に連結判定を高速に行うためにUnion-Find木のmergeを行っている部分なので、重要であると考えた。判定そのものではなく判定のための操作なので3番目。,,とても理解できた。,
12/15/2022 19:33:39,3,13,45,この問題のコアはクラスカル法で最小全域木が構築できることなので。,34,クラスカル法のコアはDSUを使えば最小全域木を構築できることなので。,19,DSUのコアはここのマージテクだと減価償却で計算量が減ることなので。,,とても理解できた。,
12/21/2022 14:08:44,4,13,27,クラスカル法で最も重要な、辺を重みの小さい順に並べるという処理を行なっているため。,8,Union-Find木で重要である、rootを探すという処理の大事な部分だから。ただ、答えに直接つながるわけではない。,19,Union-Find木で重要な「親」を更新しているため。処理内容としてはかなり単純。,,まあ理解できた。,
12/28/2022 17:13:42,5,13,27,最小全域木の問題は、貪欲法で解くことができることが本質的な部分だと考えている。したがって、コストについてグラフをソートしている27行目が最も大切だと考えた。,32,ソートされた辺について、どのような条件で選んでいるかを知ることができるため重要だと考えた。しかし、貪欲法ということがわかればある程度推測可能であるため2番目においた。,12,"UnionFind関数について、唯一外部から呼び出されている関数であるため重要だと考えた。
UnionFIndについての知識があまりなくても、is_sameという命名がされているため起こっていることの想像がし易いと考えた。したがって、UnionFind内部の実装よりもそれを呼び出すkruskal関数のほうが重要だと考えたため、3番目においた。",43:27行目のG.sort()で、どのようにソートされているのか直感的には分かりづらいため、tupleのリストであることを知ることができ重要だと考えた。,とても理解できた。,
12/14/2022 14:58:03,6,13,27,辺の重みに関する貪欲法であることがクラスカル法の本質である。,32,辺を採用することでループが発生しない場合のみ採用することを表す行である。1 番と比べると詳細にあたる。,34,辺を採用することでループが発生しない場合のみ採用、を実現するために集合の併合を行う部分。2 番に対して従たる部分だと言える。,,とても理解できた。,
12/15/2022 0:59:12,7,13,45,この問題の解法ではクラスカル法を用いるということがこの一行で分かるから．,27,"クラスカル法では辺の重みの小さい順に取り出すことで最小全域木を求めることができるということがこの行で分かるから．
1番でない理由は，クラスカル法の解法を知っている人であれば分かることであるから．",28,"クラスカル法の中ではUnionTreeを用いながら同じ集団に属しているかどうかを判断できるということが分かるから．
3番である理由は，最小全域木を求めることに直接関係するわけではなく，どのように取り出した辺がすでに同じ集合に属しているわけではないということを判定するかということを表しているから．",,まあ理解できた。,
12/18/2022 0:59:07,8,13,32,クラスカル法において、UnionFind木で閉路ができているかどうかの判定をしている重要なところだから。,17,UnionFind木において、rootが違った場合にuniteするという重要な処理をしているところだから。問題解決に直接関わるところではないので2番とした。,8,再帰を用いて、親を辿るというUnionFind木の重要な性質を記述しているところだから。問題解決に直接関わらず、難しくもないので3番とした。,,まあ理解できた。,
12/20/2022 1:40:29,9,13,34,最小全域木を求めるには、採用する辺を用いてグラフを連結する、という処理が最も大切であると考えているから。,32,その辺を採用するかどうかの処理は、その2点が連結ではないということを述べている行であるから。グラフの連結を行うことが前提となっているため、1番ではないと考えた。,27,最小全域木を求める前段階の処理として、辺の長さでソートする、ということをしないと正しい結果を返さないから。実際に木を作る部分ではないため、この部分の処理は1番や2番ではないと考えた。,"18, 22, 23行目。Union Find 木の計算量を落とすための工夫として、木にランクをつけていることを表す行であり、ここを間違えたとしても正しく動かないことはないものの、計算量が大きく落ちてしまうから。",とても理解できた。,
