time,personID,problemID,1st,1st_reason,2nd,2nd_reason,3rd,3rd_reason,others,understanding,free
12/10/2022 12:54:40,1,27,18,求めたい要素を変換した先に他の要素が存在しなければ，その要素が記録されていないというハッシュの性質を活かしている部分だと考えたため.,20,注目したインデックスに目的の要素がない場合に次に探すインデックスを決定する処理を記載しているため．1番ほどハッシュの性質の根幹にはかかわらないと考え，2番目に選択した．,8,要素を配置したいインデックスに他要素が既にある場合の処理を記載しているため．2番目と処理としては同等であるため，同じくらい重要だが，便宜上3番目とした.,,とても理解できた。,
12/31/2022 1:34:47,10,27,8,hashが空いてるところまでindexを更新して、xを入れることが重要であると思ったため。,18,hash[index] == -1の時は、その後も調べる必要がないので、return Falseする工夫が重要だと思いました。,6,1番2番より基本的かもしれないが、x % MAXの値をハッシュ値とすることも重要だと思いました。,,まあ理解できた。,
1/3/2023 8:10:56,11,27,10,ハッシュテーブルに登場した要素を持っておくことで高速に調べられるので重要だと思います．,8,ハッシュが埋まっていた場合に隣に移動するという考え方が大事だと思いました．必ずしも隣である必要はないので2番目にしました．,20,hashで調べた上で合致していたら同一とみなす手法は高速に調べられるので大事だと思います．ハッシュテーブルを検索するよりも，構築する方法がより大事に感じたので，3番目にしました．,,とても理解できた。,
12/16/2022 23:47:39,2,27,8,探したい数のハッシュ値を計算して、ハッシュ値が存在していれば探したい数も存在する、と考えるアルゴリズムなので、ハッシュ値を計算しているここが重要だと感じた。,17,探したい数のハッシュ値を計算して、ハッシュ値が存在していれば探したい数も存在する、と考えるアルゴリズムなので、ハッシュ値を計算しているここが重要だと感じた。2回目にでてきたところなので2番目。,20,ハッシュ値の一致を持って「見つかった」と判定するアルゴリズムなので、一致かどうかを判定している行がハッシュの計算に次いで重要だと感じた。,,まあ理解できた。,
12/17/2022 23:15:45,3,27,2,ハッシュテーブルを使って探索を効率化しているのがこの問題のコアであり、ハッシュテーブルを作っているのはここだから。,8,15行目と合わせてハッシュ値の生成を行っているのはここだから。,15,8行目と合わせてハッシュ値の生成を行っているのはここだから。,,とても理解できた。,
12/21/2022 23:00:43,4,27,17,探索の時に見つかるまでindexを変えながら調べるというのがこのアルゴリズムの本質だから。,8,挿入の時にもすでに入っていたらindexをずらすということが大事だから。ただメインは探索の方にあるため。,20,探索が成功したかどうかを判断する部分だから。ただ処理としてはすごく単純のため。,,とても理解できた。,
12/28/2022 22:03:24,5,27,8,insert関数を見ると、10^9までの数を10^4の配列におさめていることがわかり、その手法として8行目の操作をしていることがわかるため、もっとも重要だと考えた。,18,insertではすべてのiについてハッシュを試しており、どのような条件で探索を行うのか想像がつきづらいが、18行目を読むことでhash[index]=-1となるまで探索を進めていることがわかり、どのように数値が格納されているかわかりやすく成るため2番目に重要だと考えた。,9,"8,18行目で行われた処理についての補足として、探索と同様に挿入の際にもhash[i]=-1となるまで右に探索を進めていくということがわかるから。",,あまり理解できなかった。,
12/17/2022 23:54:53,6,27,9,挿入時に空いているアドレスを探して記録するというオープンアドレス法の特徴を示している。,18,検索時に空のアドレスにぶつかればその key は入っていないと判断するというオープンアドレス法の特徴を示している。1 番の挿入方法から導かれる検索方法だといえる。,22,全アドレスを見尽くしても key が見つからない場合もその key 入っていないと判断する。2 番と比べてより自明。,,とても理解できた。,
12/15/2022 18:17:50,7,27,6,問題を解くために，ハッシュを用いることで効率的に探索を可能にしようとしていることがこの行で分かるから．,2,"ハッシュテーブルとして配列を用意し，そこにどのハッシュの数字が存在していたかを格納していくことで探索を効率的にしようとしていることが，このハッシュテーブルの宣言で読み取れるから．
1番でない理由としては，ハッシュテーブルよりどのようなハッシュを用いて計算していくのを表す6行目の方が重要であると考えたから．",8,"ハッシュの重複があった場合，次に空いているハッシュ値まで値をずらしていく，オープンアドレス法を用いる工夫がこの行から読み取れるから．
3番である理由としては，これは1,2番で挙げた行のハッシュテーブルを利用することに付随するものであり，より重要度は低いと思ったから．",,まあ理解できた。,
12/19/2022 18:20:10,8,27,8,その数字をどのindexに入れるかというハッシュを定義している、ハッシュ探索の肝の部分だから。,20,ハッシュを計算して、実際に挿入されている値と一致すれば「見つかった」ということになり、探索において重要な部分だから。ハッシュ計算の方が本質的だと思ったのでこちらは2番とした。,18,2番と同様だが、もしハッシュを計算してそこに値がなければ、その値は「見つからない」ということになるので、これもまた探索で重要だから。重要度は2番と同じ,,とても理解できた。,
12/21/2022 3:30:25,9,27,6,ハッシュ化されたxを求める行であるため。今回のハッシュ探索ではxをある値で割った余りをハッシュの値として用いることを示しているため、全ての前提となっていると考え、一番大事と考えている。,8,ハッシュ化されたxに対して、どこに値を挿入するかを表す行であるため。ハッシュ化されたxが前提となっているため、ハッシュ化されたxを求めることの次に重要であると考えた。,7,ハッシュ化されたxに対して、空きが見つかるまで1を足し続けることで格納する場所を見つけようとしていることを表す行であるから。1を足し続けることは本質ではないため、1番や2番ではないと考えた。,15～17行目：値を格納するだけでなく、検索するときも格納するときと同じ処理を行うことを表しており、格納するとき同様に重要と考えている。,とても理解できた。,
